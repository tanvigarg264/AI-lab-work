#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct State {
    vector<int> queens;
    int totalConflicts;
};

bool isSafe(int row, int col, const vector<int>& queens) {
    for (int prevRow = 0; prevRow < row; ++prevRow) {
        if (queens[prevRow] == col || abs(queens[prevRow] - col) == abs(prevRow - row)) {
            return false;
        }
    }
    return true;
}

int calculateConflicts(const vector<int>& queens) {
    int conflicts = 0;
    int N = queens.size();
    for (int i = 0; i < N; ++i) {
        for (int j = i + 1; j < N; ++j) {
            if (queens[i] == queens[j] || abs(queens[i] - queens[j]) == abs(i - j)) {
                conflicts++;
            }
        }
    }
    return conflicts;
}

struct CompareStates {
    bool operator()(const State& s1, const State& s2) {
        return s1.totalConflicts > s2.totalConflicts;
    }
};

void solveNQueensAStar(int N) {
    priority_queue<State, vector<State>, CompareStates> pq;

    State initial;
    initial.queens.resize(N);
    initial.totalConflicts = 0;
    pq.push(initial);

    while (!pq.empty()) {
        State current = pq.top();
        pq.pop();

        if (current.queens.size() == N) {
            // Found a solution
            for (int col : current.queens) {
                for (int i = 0; i < N; ++i) {
                    cout << (i == col ? "Q " : ". ");
                }
                cout << "\n";
            }
            cout << "\n";
        } else {
            int row = current.queens.size();
            for (int col = 0; col < N; ++col) {
                if (isSafe(row, col, current.queens)) {
                    State successor = current;
                    successor.queens.push_back(col);
                    successor.totalConflicts = calculateConflicts(successor.queens);
                    pq.push(successor);
                }
            }
        }
    }
}

int main() {
    int N;
    cout << "Enter the value of N: ";
    cin >> N;
    solveNQueensAStar(N);
    return 0;
}
